length(theta.aux)
mat.prob.aux <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.prob.aux)) {
for (j in 1:ncol(mat.prob.aux))
mat.prob.aux[i,j] <- mat.par[i,3] + (1-mat.par[i,3])/(1+exp(-D*mat.par[i,1]*(theta.aux[i]-mat.par[i,2])))
}
mat.prob.aux
mat.prob1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.prob1[i,j] <- 0 + (1-0)/(1+exp(-D*1*(theta.aux[j]-mat.par[i,2])))
}
mat.inf1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.inf1[i,j] <- (D^2) * (1^2) * ((1-mat.prob1[i,j])/mat.prob1[i,j]) * ((mat.prob1[i,j] - 0)/(1 - 0))^2
}
mat.inf1
mat.inf1
inf_teste1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste1[i] <- sum(mat.inf1[i,1:length(theta.aux)])
}
plot(theta.aux,mat.inf1[1,],type="l")
for (i in 2:nrow(mat.par))
lines(theta.aux,mat.inf1[i,],lty=i, col = i)
mat.inf1
inf_teste1
mat.inf1
mat.inf1
inf_teste1
inf_teste1[i] <- sum(mat.inf1[i,1:length(theta.aux)])
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste1[i] <- sum(mat.inf1[i,1:length(theta.aux)])
}
inf_teste1
inf_teste1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste1[i] <- sum(mat.inf1[i,1:length(theta.aux)])
}
inf_teste1
mat.prob1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.prob1[i,j] <- 0 + (1-0)/(1+exp(-D*1*(theta.aux[j]-mat.par[i,2])))
}
mat.inf1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.inf1[i,j] <- (D^2) * (1^2) * ((1-mat.prob1[i,j])/mat.prob1[i,j]) * ((mat.prob1[i,j] - 0)/(1 - 0))^2
}
# Função de informação do teste
inf_teste1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste1[i] <- sum(mat.inf1[i,1:length(theta.aux)])
}
inf_teste1
plot(theta.aux,mat.inf1[1,],type="l")
for (i in 2:nrow(mat.par))
lines(theta.aux,mat.inf1[i,],lty=i, col = i)
mat.prob2 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.prob2[i,j] <- 0 + (1-0)/(1+exp(-D*mat.par[i,1]*(theta.aux[j]-mat.par[i,2])))
}
mat.inf2 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.inf2[i,j] <- (D^2) * (mat.par[i,1]^2) * ((1-mat.prob2[i,j])/mat.prob2[i,j]) * ((mat.prob2[i,j] - 0)/(1 - 0))^2
}
inf_teste2 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste2[i] <- sum(mat.inf2[i,1:length(theta.aux)])
}
plot(theta.aux,mat.inf2[1,],type="l")
for (i in 2:nrow(mat.par))
lines(theta.aux,mat.inf2[i,],lty=i, col = i)
inf_teste2
mat.prob3 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.prob3[i,j] <- mat.par[i,3] + (1-mat.par[i,3])/(1+exp(-D*mat.par[i,1]*(theta.aux[j]-mat.par[i,2])))
}
mat.inf3 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.inf3[i,j] <- (D^2) * (mat.par[i,1]^2) * ((1-mat.prob3[i,j])/mat.prob3[i,j]) * ((mat.prob3[i,j] - mat.par[i,3])/(1 - mat.par[i,3]))^2
}
inf_teste3 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste3[i] <- sum(mat.inf3[i,1:7])
}
plot(theta.aux,mat.inf3[1,],type="l")
for (i in 2:nrow(mat.par))
lines(theta.aux,mat.inf3[i,],lty=i, col = i)
mat.inf3
inf_teste3
inf_teste3[i]
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
inf_teste3[i] <- sum(mat.inf3[i,1:7])
}
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.inf3[i,j] <- (D^2) * (mat.par[i,1]^2) * ((1-mat.prob3[i,j])/mat.prob3[i,j]) * ((mat.prob3[i,j] - mat.par[i,3])/(1 - mat.par[i,3]))^2
}
inf_teste3 <- matrix(0,nrow(mat.par),length(theta.aux))
mat.inf3
mat.inf1
mat.prob
theta.aux
mat.prob1
mat.inf1 <- matrix(0,nrow(mat.par),length(theta.aux))
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.prob1[i,j] <- 0 + (1-0)/(1+exp(-D*1*(theta.aux[j]-mat.par[i,2])))
}
mat.prob1
mat.inf1
for (i in 1:nrow(mat.par)) {
for (j in 1:length(theta.aux))
mat.inf1[i,j] <- (D^2) * (1^2) * ((1-mat.prob1[i,j])/mat.prob1[i,j]) * ((mat.prob1[i,j] - 0)/(1 - 0))^2
}
mat.inf1
plot(c(1,2,3))
hist(rdu(1000, 10))
rdu<-function(n,k) sample(1:k,n,replace=T)
hist(rdu(1000, 10))
hist(ceiling(runif(1000, min=0, max=10)))
hist(runif(100000000, 0, 10))
curve(genlogis::dgenlog(x, 1, 0.0727, 1.926), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 1, 1), xlim = c(-5, 5))
max(dgenlog(x, 1, 1, 1))
library('genlogis')
max(dgenlog(x, 1, 1, 1))
max(dgenlog(2, 1, 1, 1))
max(dgenlog(seq(-2,2, 0.001), 1, 1, 1))
devtools::install_github('pinduzera/genlogis')
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
library('genlogis')
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
library('genlogis')
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
devtools::install_github('pinduzera/genlogis')
devtools::install_github('pinduzera/genlogis', force =T)
s
library('genlogis')
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
devtools::install_github('pinduzera/genlogis')
library('genlogis')
curve(genlogis::dgenlog(x, 0, 1, 0), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1, 2), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1, -1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1, -2), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 0, 1, 1), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 0, 1, 1, -1), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 0, 1, 1, -2), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 0, 1, 1, 2), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 0, 1, 1), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 1, 1, 1), xlim = c(-5, 5))
curve(genlogis::pgenlog(x), xlim = c(-5, 5))
curve(genlogis::pgenlog(x, 1, 1, 1), xlim = c(-5, 5))
curve(genlogis::qgenlog(x, 1, 1, 1), xlim = c(-5, 5))
qgenlog(x, 1, 1, 1)
?qgenlog
?qgenlog(0.1)
qgenlog(0.1)
curve(qgenlog(0.1))
curve(qgenlog(x))
curve(genlogis::qgenlog(x, 1, 1, 1), xlim = c(-5, 5))
curve(genlogis::qgenlog(x, 1, 1, 0), xlim = c(-5, 5))
curve(genlogis::qgenlog(x, 1, 0, 1), xlim = c(-5, 5))
curve(genlogis::qgenlog(x, 1, 1, 1), xlim = c(-5, 5))
qgenlog
curve(qgenlog(x))
curve(qgenlog(x, 1))
curve(qgenlog(x, 1,1))
curve(qgenlog(x, 1,1,1))
curve(genlogis::qgenlog(x, 1, 1, 1))
curve(genlogis::qgenlog(x, 1, 1, 1, 2))
curve(genlogis::qgenlog(x, 1, 1, 1, 3))
curve(genlogis::qgenlog(x, 1, 1, 1))
curve(genlogis::dgenlog(x, 0, 0, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 0), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 0, 0), xlim = c(-5, 5))
curve(dlogis(x), add = T, col = 'red')
curve(genlogis::dgenlog(x, 1, 0, 1), xlim = c(-5, 5))
curve(dlogis(x), add = T, col = 'red')
curve(genlogis::dgenlog(x, 1, 0, 0), xlim = c(-5, 5))
curve(dlogis(x), add = T, col = 'red')
library('genlogis')
?pgenlog
install.packages('epitools')
tabela <- matrix(189, 10845,
104, 10933,
nrow =2, byrow = T,
dimnames = list(c('placebo', 'aspirina'), c('sim', 'nao')))
tabela <- matrix(c(189, 10845,
104, 10933),
nrow =2, byrow = T,
dimnames = list(c('placebo', 'aspirina'), c('sim', 'nao')))
tabela
library('epitools')
margin.table(tabela)
margin.table(tabela, 1)
margin.table(tabela, 2)
oddsratio(tabela)
oddsratio(tabela, verbose = T)
rm(list = ls(all=T))
oddsratio(tabela, verbose = T)
library('epitools')
tabela <- matrix(c(189, 10845,
104, 10933),
nrow =2, byrow = T,
dimnames = list(c('placebo', 'aspirina'), c('sim', 'nao')))
library('epitools')
tabela <- matrix(c(189, 10845,
104, 10933),
nrow =2, byrow = T,
dimnames = list(c('placebo', 'aspirina'), c('sim', 'nao')))
tabela
margin.table(tabela, 1)
margin.table(tabela, 2)
oddsratio(tabela, verbose = T)
oddsratio(tabela, verbose = T)
oddsratio(tabela)
?oddsratio(tabela)
oddsratio(tabela, method = 'fisher')
?oddsratio(tabela, method = 'fisher')
oddsratio(tabela, method = 'midp')
oddsratio(tabela, method = 'fisher')
tabela2 <- matrix(c(10, 2,
2, 4),
nrow =2, byrow = T,
dimnames = list(c('teste', 'controle'), c('favoravel', 'desfavoravel')))
tabela2
oddsratio(tabela, method = 'fishe')
oddsratio(tabela2, method = 'fishe')
tabela2
tabela2
oddsratio(tabela2, method = 'fishe')
oddsratio(tabela2, method = 'fisher')
oddsratio(tabela2, method = 'fisher', correction = T)
oddsratio(tabela2)
oddsratio.fisher(tabela2)
oddsratio.fisher(tabela2, verbose = T)
chisq.test(tabela2)
oddsratio(tabela2)
oddsratio(tabela)
tabela2 <- matrix(c(8, 4,
4, 2),
nrow =2, byrow = T,
dimnames = list(c('teste', 'controle'), c('favoravel', 'desfavoravel')))
tabela2
oddsratio(tabela2)
chisq.test(tabela2)
tabela2 <- matrix(c(6, 2,
2, 4),
nrow =2, byrow = T,
dimnames = list(c('teste', 'controle'), c('favoravel', 'desfavoravel')))
tabela2
oddsratio(tabela2)
chisq.test(tabela2)
tabela2 <- matrix(c(10, 2,
2, 4),
nrow =2, byrow = T,
dimnames = list(c('teste', 'controle'), c('favoravel', 'desfavoravel')))
tabela2
oddsratio(tabela2)
chisq.test(tabela2)
oddsratio(tabela2, method = 'fisher')
oddsratio(tabela2)
oddsratio(tabela2, method = 'fisher')
oddsratio(tabela2, method = 'fisher')
oddsratio(tabela)
oddsratio(tabela2, method = 'mido')
oddsratio(tabela2, method = 'midp')
oddsratio(tabela2, method = 'wald')
tabela3 <- matrix(c(279, 225,
165, 191),
nrow =2, byrow = T,
dimnames = list(c('feminino', 'masculino'), c('democrata', 'republicano')))
tabela3
oddsratio(tabela3, method = 'wald')
chisq.test(tabela3)
?chisq.test(tabela3)
tabela3 <- matrix(c(279, 73, 225,
165, 47, 191),
nrow =2, byrow = T,
dimnames = list(c('feminino', 'masculino'), c('democrata','independente' 'republicano')))
tabela3 <- matrix(c(279, 73, 225,
165, 47, 191),
nrow =2, byrow = T,
dimnames = list(c('feminino', 'masculino'), c('democrata','independente', 'republicano')))
chisq.test(tabela3)
chisq.test(tabela3)
tabela3 <- matrix(c(279, 225,
165, 191),
nrow =2, byrow = T,
dimnames = list(c('feminino', 'masculino'), c('democrata', 'republicano')))
tabela3
oddsratio(tabela3, method = 'wald')
chisq.test(tabela3)
prop.table(tabela3)
prop.table(tabela3,1)
prop.table(tabela3,1) * prop.table(tabela3,2)
prop.table(tabela3,1) * prop.table(tabela3,2) * margin.table(tabela3)
tabela3_esp <- prop.table(tabela3,1) * prop.table(tabela3,2) * margin.table(tabela3)
tabela3/tabela3_esp
2*tabela3*log(tabela3/tabela3_esp)
2*sum(tabela3*log(tabela3/tabela3_esp))
prop.table(tabela3,1)
prop.table(tabela3,2)
margin.table(tabela3)
tabela3_esp <- prop.table(tabela3,1) * prop.table(tabela3,2) * margin.table(tabela3)
tabela3_esp
prop.table(tabela3,1)
prop.table(tabela3,1)
504/860
prop.table(tabela3,1)
margin.table(tabela3)
prop.table(margin.table(tabela3))
margin.table(tabela3)
margin.table(tabela3,1)
prop.table(margin.table(tabela3,1))
prop.table(margin.table(tabela3,2))
tabela3_esp <- prop.table(margin.table(tabela3,1)) * prop.table(margin.table(tabela3,2)) * margin.table(tabela3)
tabela3_esp
?prop.table()
chisq.test(tabela3)
a <- chisq.test(tabela3)
a
a$expected
chisq.test(tabela3)$expected
tabela3_esp <- chisq.test(tabela3)$expected
tabela3_esp
2*sum(tabela3*log(tabela3/tabela3_esp))
chisq.test(tabela3)
((tabela3 - tabela3_esp)^2)/tabela3_esp
sum(((tabela3 - tabela3_esp)^2)/tabela3_esp)
chisq.test(tabela3)
?chisq.test(tabela3)
chisq.test(tabela3, correct = F)
sum(((tabela3 - tabela3_esp)^2)/tabela3_esp)
tabela3_esp <- chisq.test(tabela3)$expected
tabela3_esp
2*sum(tabela3*log(tabela3/tabela3_esp))
oddsratio(tabela3, method = 'wald')
pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)))
?pchisq()
pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
dchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
qchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
oddsratio(tabela3, method = 'wald')
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
oddsratio(tabela3, method = 'wald', correction = F)
oddsratio(tabela3, method = 'wald', correction = T)
oddsratio(tabela3, method = 'wald', correction = F)
?oddsratio(tabela3, method = 'wald', correction = F)
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
oddsratio(tabela3, method = 'wald', correction = F)
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1)
oddsratio(tabela3, method = 'wald', correction = F)
oddsratio.wald(tabela3, method = 'wald', correction = F)
oddsratio.wald(tabela3, correction = F)
oddsratio(tabela3, correction = F)
oddsratio(tabela3, method = 'fisher', correction = F)
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1) #pvalor chi-quadrado 1 gl
oddsratio(tabela2, method = 'fisher')
oddsratio(tabela)
install.packages('deducer')
install.packages('Deducer')
library('Deducer')
?Deducer
??Deducer
Deducer::likelihood.text
?likelihood.text()
Deducer::likelihood.text()
install.packages(rJava)
install.packages('rJava')
Deducer::likelihood.text()
library('rJava')
Deducer::likelihood.text()
?likelihood.text()
??Deducer
??Deducer
Deducer::likelihood.text()
??likelihood.text
??likelihood.test
Deducer::likelihood.test
Deducer::likelihood.test(tabela3)
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1) #pvalor chi-quadrado 1 gl
chisq.test(tabela3, correct = F) ## compararar o p-valor do chi-quadrado com o resultado a seguir
tabela3_esp <- chisq.test(tabela3)$expected # valores esperados
Deducer::likelihood.test(tabela3) ### usando pacote
tabela3
chisq.test(tabela3, correct = F) ## compararar o p-valor do chi-quadrado com o resultado a seguir
oddsratio(tabela3)
library('epitools')
oddsratio(tabela3)
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1) #pvalor chi-quadrado 1 gl
2*sum(tabela3*log(tabela3/tabela3_esp)) # G^2 razao verossimilhanca
likelihood.test
Deducer::likelihood.test
Deducer::likelihood.test(tabela3) ### usando pacote
2*sum(tabela3*log(tabela3/tabela3_esp)) # G^2 razao verossimilhanca
1- pchisq(2*sum(tabela3*log(tabela3/tabela3_esp)) ,1) #pvalor chi-quadrado 1 gl
Deducer::likelihood.test(tabela3) ### usando pacote
chisq.test(tabela3, correct = F) ## compararar o p-valor do chi-quadrado com o resultado a seguir
Deducer::likelihood.test(tabela3) ### usando pacote
oddsratio(tabela3)
chisq.test(tabela3, correct = F) ## compararar o p-valor do chi-quadrado com o resultado a seguir
devtools::install_github('pinduzera/genlogis')
?pgenlog
library('genlogis')
?pgenlog
pgenlog
curve(genlogis::dgenlog(x, 1, 0, 0), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 1, 0), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 0, 0), xlim = c(-5, 5))
curve(dlogis(x), add = T, col = 'red')
curve(genlogis::dgenlog(x, 2, 0, 0), xlim = c(-5, 5))
curve(dlogis(x), add = T, col = 'red')
curve(dlogis(x, location = 1/2), add = T, col = 'red')
curve(dlogis(x, location = 2), add = T, col = 'red')
curve(dlogis(x, scale = 2), add = T, col = 'red')
curve(dlogis(x, scale = 1/2), add = T, col = 'red')
curve(genlogis::dgenlog(x, 2, 0, 0), xlim = c(-5, 5))
curve(dlogis(x, scale = 1/3), add = T, col = 'red')
curve(dlogis(x, scale = 1/2), add = T, col = 'red')
curve(dlogis(x, scale = 1/1.8), add = T, col = 'red')
curve(genlogis::dgenlog(x, 2, 0, 0), xlim = c(-5, 5))
curve(dlogis(x, scale = 1/1.8), add = T, col = 'red')
pgenlog
dgenlog
dgenlog
qgenlog
curve(genlogis::dgenlog(x, 2, 0, 0), xlim = c(-5, 5))
dgenlog(x, 2, 0, 0)
dgenlog(1, 2, 0, 0)
curve(genlogis::dgenlog(x, 1, 0.0727, 1.926), xlim = c(-5, 5))
curve(genlogis::qgenlog(x, 1.598, 0.0727, 1.926))
curve(genlogis::dgenlog(x, 2, 0, 0), xlim = c(-5, 5))
curve(dlogis(x, scale = 1/2), add = T, col = 'red')
hist(rnorm(1000), probability = T)
curve(dlogis(x), add = T, col = 'red')
curve(dnorm(x), add = T, col = 'red')
hist(rnorm(1000), probability = T)
curve(dnorm(x), add = T, col = 'red')
curve(genlogis::dgenlog(x, 1, 0.0727, 1.926), xlim = c(-5, 5))
curve(genlogis::qgenlog(x, 1.598, 0.0727, 1.926))
curve(genlogis::pgenlog(x, 1.598, 0.0727, 1.926), xlim = c(-4, 4))
curve(genlogis::dgenlog(x, 1, 2/pi, 1.926), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 2/pi, 2), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 2/pi, .5), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 2/pi, 0), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 2/pi, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 1, 2/pi, 2), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 2/pi, 2), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 2/pi, 0), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 2/pi, 2), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 2/pi, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 3, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 10, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 0.2, 1), xlim = c(-5, 5))
curve(genlogis::dgenlog(x, 0, 1, 1), xlim = c(-5, 5))
Sys.Date()+91
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
install.packages("digest")
devtools::install_github("klutometis/roxygen")
library('roxygen2')
setwd('E:/Dropbox/Dropbox/UnB/tcc/codigos/') ## windows
setwd("./genlogis")
document()
library('roxygen2')
library('devtools')
document()
setwd("./genlogis")
document()
?genlog_slider
document()
devtools::install_github('pinduzera/genlogis')
genlogis::genlog_slider()
?genlogis::genlog_slider()
?genlog_slider()
library('genlogis')
?dgenlog()
genlogis::genlog_slider()
genlog_slider(dgenlog(1000))
genlog_slider(rgenlog(1000))
genlog_slider
rgenlog(1000)
genlog_slider(rgenlog(1000))
genlog_slider
genlog_slider(rgenlog(1000))
devtools::install_github('pinduzera/genlogis')
devtools::install_github('pinduzera/genlogis')
